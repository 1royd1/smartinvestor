import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.graph_objects as go
import ta
import sqlite3
import bcrypt
from fpdf import FPDF
import feedparser
from streamlit_option_menu import option_menu

# OpenAI Í¥ÄÎ†® ÏÑ†ÌÉùÏ†Å import
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="SmartInvestor Pro",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Streamlit SecretsÏóêÏÑú API ÌÇ§ Í∞ÄÏ†∏Ïò§Í∏∞ (ÏÑ†ÌÉùÏ†Å)
try:
    if OPENAI_AVAILABLE and 'OPENAI_API_KEY' in st.secrets:
        openai.api_key = st.secrets['OPENAI_API_KEY']
        AI_ENABLED = True
    else:
        AI_ENABLED = False
except:
    AI_ENABLED = False

# CSS Ïä§ÌÉÄÏùº
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1E88E5;
        margin-bottom: 30px;
        font-size: 2.5em;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }
    .recommendation-card {
        background-color: #e8f5e9;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 10px;
        border-left: 4px solid #4caf50;
    }
    .warning-card {
        background-color: #fff3e0;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 10px;
        border-left: 4px solid #ff9800;
    }
    .news-card {
        background-color: #e3f2fd;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 10px;
        border-left: 4px solid #2196f3;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 24px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding-left: 20px;
        padding-right: 20px;
    }
</style>
""", unsafe_allow_html=True)

# Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî
def init_database():
    conn = sqlite3.connect('smartinvestor.db')
    c = conn.cursor()
    
    # ÏÇ¨Ïö©Ïûê ÌÖåÏù¥Î∏î
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  username TEXT UNIQUE NOT NULL,
                  email TEXT UNIQUE NOT NULL,
                  password TEXT NOT NULL,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  is_admin INTEGER DEFAULT 0)''')
    
    # Î∂ÑÏÑù Í∏∞Î°ù ÌÖåÏù¥Î∏î
    c.execute('''CREATE TABLE IF NOT EXISTS analysis_history
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  symbol TEXT,
                  analysis_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  score REAL,
                  recommendation TEXT,
                  FOREIGN KEY (user_id) REFERENCES users (id))''')
    
    # Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï ÏÉùÏÑ± (ÏóÜÏúºÎ©¥)
    admin_password = bcrypt.hashpw("admin123".encode('utf-8'), bcrypt.gensalt())
    try:
        c.execute("INSERT INTO users (username, email, password, is_admin) VALUES (?, ?, ?, ?)",
                  ("admin", "admin@smartinvestor.com", admin_password, 1))
    except sqlite3.IntegrityError:
        pass
    
    conn.commit()
    conn.close()

# ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ìï®Ïàò
def authenticate_user(email, password):
    conn = sqlite3.connect('smartinvestor.db')
    c = conn.cursor()
    c.execute("SELECT id, username, password, is_admin FROM users WHERE email = ?", (email,))
    user = c.fetchone()
    conn.close()
    
    if user and bcrypt.checkpw(password.encode('utf-8'), user[2]):
        return {"id": user[0], "username": user[1], "is_admin": user[3]}
    return None

def register_user(username, email, password):
    conn = sqlite3.connect('smartinvestor.db')
    c = conn.cursor()
    
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    
    try:
        c.execute("INSERT INTO users (username, email, password) VALUES (?, ?, ?)",
                  (username, email, hashed_password))
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        conn.close()
        return False

# Í∏∞Ïà†Ï†Å ÏßÄÌëú Í≥ÑÏÇ∞ Ìï®Ïàò
def calculate_technical_indicators(df):
    try:
        # Îç∞Ïù¥ÌÑ∞ Î≥µÏÇ¨Î≥∏ ÏÉùÏÑ±
        df = df.copy()
        
        # RSI
        df['RSI'] = ta.momentum.RSIIndicator(df['Close'], window=14).rsi()
        
        # MACD
        macd = ta.trend.MACD(df['Close'])
        df['MACD'] = macd.macd()
        df['MACD_signal'] = macd.macd_signal()
        df['MACD_diff'] = macd.macd_diff()
        
        # Bollinger Bands
        bb = ta.volatility.BollingerBands(df['Close'], window=20)
        df['BB_upper'] = bb.bollinger_hband()
        df['BB_middle'] = bb.bollinger_mavg()
        df['BB_lower'] = bb.bollinger_lband()
        
        # Stochastic RSI
        stoch_rsi = ta.momentum.StochRSIIndicator(df['Close'])
        df['StochRSI'] = stoch_rsi.stochrsi()
        
        # CCI
        df['CCI'] = ta.trend.CCIIndicator(df['High'], df['Low'], df['Close']).cci()
        
        # MFI
        df['MFI'] = ta.volume.MFIIndicator(df['High'], df['Low'], df['Close'], df['Volume']).money_flow_index()
        
        # NaN Í∞í Ï≤òÎ¶¨
        df = df.fillna(method='bfill').fillna(method='ffill')
        
        return df
    except Exception as e:
        st.error(f"Í∏∞Ïà†Ï†Å ÏßÄÌëú Í≥ÑÏÇ∞ Ï§ë Ïò§Î•ò: {str(e)}")
        return df

# Îß§Ïàò Ïã†Ìò∏ Ï†êÏàò Í≥ÑÏÇ∞
def calculate_buy_score(df):
    try:
        if len(df) < 2:
            return 0, []
            
        latest = df.iloc[-1]
        score = 0
        signals = []
        
        # RSI Í≥ºÎß§ÎèÑ (30 Ïù¥Ìïò)
        if pd.notna(latest['RSI']) and latest['RSI'] < 30:
            score += 1
            signals.append("RSI Í≥ºÎß§ÎèÑ Ïã†Ìò∏")
        
        # MACD Í≥®Îì†ÌÅ¨Î°úÏä§
        if (pd.notna(latest['MACD']) and pd.notna(latest['MACD_signal']) and 
            pd.notna(df.iloc[-2]['MACD']) and pd.notna(df.iloc[-2]['MACD_signal'])):
            if latest['MACD'] > latest['MACD_signal'] and df.iloc[-2]['MACD'] <= df.iloc[-2]['MACD_signal']:
                score += 1
                signals.append("MACD Í≥®Îì†ÌÅ¨Î°úÏä§")
        
        # Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú ÌïòÎã® ÌÑ∞Ïπò
        if pd.notna(latest['Close']) and pd.notna(latest['BB_lower']):
            if latest['Close'] <= latest['BB_lower']:
                score += 1
                signals.append("Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú ÌïòÎã® ÌÑ∞Ïπò")
        
        # CCI Í≥ºÎß§ÎèÑ
        if pd.notna(latest['CCI']) and latest['CCI'] < -100:
            score += 1
            signals.append("CCI Í≥ºÎß§ÎèÑ Ïã†Ìò∏")
        
        # MFI Í≥ºÎß§ÎèÑ
        if pd.notna(latest['MFI']) and latest['MFI'] < 20:
            score += 1
            signals.append("MFI Í≥ºÎß§ÎèÑ Ïã†Ìò∏")
        
        return score, signals
    except Exception as e:
        return 0, []

# AI Î∂ÑÏÑù Ìï®Ïàò (ÏÑ†ÌÉùÏ†Å)
def get_ai_analysis(symbol, technical_data):
    if not AI_ENABLED:
        return "AI Î∂ÑÏÑùÏùÄ OpenAI API ÌÇ§Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§."
    
    try:
        prompt = f"""
        {symbol} Ï£ºÏãùÏùò Í∏∞Ïà†Ï†Å ÏßÄÌëúÎ•º Î∂ÑÏÑùÌï¥Ï£ºÏÑ∏Ïöî:
        - ÌòÑÏû¨Í∞Ä: ${technical_data['Close']:.2f}
        - RSI: {technical_data['RSI']:.2f}
        - MACD: {technical_data['MACD']:.2f}
        
        Í∞ÑÎã®Ìïú Ìà¨Ïûê ÏùòÍ≤¨ÏùÑ ÌïúÍµ≠Ïñ¥Î°ú Ï†úÍ≥µÌï¥Ï£ºÏÑ∏Ïöî.
        """
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "ÎãπÏã†ÏùÄ Ï£ºÏãù Î∂ÑÏÑù Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=200
        )
        
        return response.choices[0].message.content
    except Exception as e:
        return f"AI Î∂ÑÏÑù Ï§ë Ïò§Î•ò: {str(e)}"

# PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ìï®Ïàò
def generate_pdf_report(symbol, data, score, signals, user_name):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    
    # Ï†úÎ™©
    pdf.set_font("Arial", "B", 20)
    pdf.cell(0, 10, f"SmartInvestor Pro - {symbol} Analysis Report", ln=True, align="C")
    pdf.ln(10)
    
    # ÎÇ†ÏßúÏôÄ ÏÇ¨Ïö©Ïûê
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}", ln=True)
    pdf.cell(0, 10, f"Analyst: {user_name}", ln=True)
    pdf.ln(10)
    
    # Ï¢ÖÎ™© Ï†ïÎ≥¥
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Stock Information", ln=True)
    pdf.set_font("Arial", size=12)
    latest = data.iloc[-1]
    pdf.cell(0, 10, f"Current Price: ${latest['Close']:.2f}", ln=True)
    pdf.cell(0, 10, f"Volume: {latest['Volume']:,}", ln=True)
    pdf.ln(5)
    
    # Í∏∞Ïà†Ï†Å ÏßÄÌëú
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Technical Indicators", ln=True)
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"RSI: {latest['RSI']:.2f}", ln=True)
    pdf.cell(0, 10, f"MACD: {latest['MACD']:.2f}", ln=True)
    pdf.cell(0, 10, f"CCI: {latest['CCI']:.2f}", ln=True)
    pdf.cell(0, 10, f"MFI: {latest['MFI']:.2f}", ln=True)
    pdf.ln(5)
    
    # Ìà¨Ïûê Ï∂îÏ≤ú
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Investment Recommendation", ln=True)
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"Buy Score: {score}/5", ln=True)
    
    if score >= 3:
        pdf.set_text_color(0, 128, 0)
        pdf.cell(0, 10, "Recommendation: BUY", ln=True)
    else:
        pdf.set_text_color(255, 0, 0)
        pdf.cell(0, 10, "Recommendation: HOLD/WAIT", ln=True)
    
    pdf.set_text_color(0, 0, 0)
    pdf.ln(5)
    
    # Ïã†Ìò∏ Î™©Î°ù
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Active Signals", ln=True)
    pdf.set_font("Arial", size=12)
    for signal in signals:
        pdf.cell(0, 10, f"- {signal}", ln=True)
    
    return pdf.output(dest='S').encode('latin-1')

# Î©îÏù∏ Ïï±
def main():
    init_database()
    
    # ÏÑ∏ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    if 'user' not in st.session_state:
        st.session_state.user = None
    
    # Î°úÍ∑∏Ïù∏/ÌöåÏõêÍ∞ÄÏûÖ ÌôîÎ©¥
    if not st.session_state.logged_in:
        st.markdown("<h1 class='main-header'>üöÄ SmartInvestor Pro</h1>", unsafe_allow_html=True)
        st.markdown("<p style='text-align: center; font-size: 1.2em;'>AI Í∏∞Î∞ò Ïä§ÎßàÌä∏ Ìà¨Ïûê Î∂ÑÏÑù ÌîåÎû´Ìèº</p>", unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            tab1, tab2 = st.tabs(["Î°úÍ∑∏Ïù∏", "ÌöåÏõêÍ∞ÄÏûÖ"])
            
            with tab1:
                with st.form("login_form"):
                    email = st.text_input("Ïù¥Î©îÏùº", value="admin@smartinvestor.com")
                    password = st.text_input("ÎπÑÎ∞ÄÎ≤àÌò∏", type="password", value="admin123")
                    st.caption("Îç∞Î™®: admin@smartinvestor.com / admin123")
                    submitted = st.form_submit_button("Î°úÍ∑∏Ïù∏", use_container_width=True)
                    
                    if submitted:
                        user = authenticate_user(email, password)
                        if user:
                            st.session_state.logged_in = True
                            st.session_state.user = user
                            st.success("Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ!")
                            st.rerun()
                        else:
                            st.error("Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.")
            
            with tab2:
                with st.form("register_form"):
                    new_username = st.text_input("ÏÇ¨Ïö©ÏûêÎ™Ö")
                    new_email = st.text_input("Ïù¥Î©îÏùº")
                    new_password = st.text_input("ÎπÑÎ∞ÄÎ≤àÌò∏", type="password")
                    new_password_confirm = st.text_input("ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏", type="password")
                    submitted = st.form_submit_button("ÌöåÏõêÍ∞ÄÏûÖ", use_container_width=True)
                    
                    if submitted:
                        if new_password != new_password_confirm:
                            st.error("ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
                        elif len(new_password) < 6:
                            st.error("ÎπÑÎ∞ÄÎ≤àÌò∏Îäî ÏµúÏÜå 6Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.")
                        else:
                            if register_user(new_username, new_email, new_password):
                                st.success("ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ! Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
                            else:
                                st.error("Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏÇ¨Ïö©ÏûêÎ™Ö ÎòêÎäî Ïù¥Î©îÏùºÏûÖÎãàÎã§.")
    
    # Î©îÏù∏ Ïï± ÌôîÎ©¥
    else:
        # ÏÇ¨Ïù¥ÎìúÎ∞î
        with st.sidebar:
            st.markdown(f"### üëã ÌôòÏòÅÌï©ÎãàÎã§, {st.session_state.user['username']}Îãò!")
            
            # Î©îÎâ¥ ÏòµÏÖò
            menu_options = ["Ìôà", "Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù", "Ìè¨Ìä∏Ìè¥Î¶¨Ïò§", "Îâ¥Ïä§", "ÏÑ§Ï†ï"]
            menu_icons = ["house", "graph-up", "wallet2", "newspaper", "gear"]
            
            # AI Í∏∞Îä•Ïù¥ ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ Î©îÎâ¥ Ï∂îÍ∞Ä
            if AI_ENABLED:
                menu_options.insert(2, "AI Î∂ÑÏÑù")
                menu_icons.insert(2, "robot")
            
            selected = option_menu(
                menu_title="Î©îÎâ¥",
                options=menu_options,
                icons=menu_icons,
                menu_icon="cast",
                default_index=0
            )
            
            if st.button("Î°úÍ∑∏ÏïÑÏõÉ", use_container_width=True):
                st.session_state.logged_in = False
                st.session_state.user = None
                st.rerun()
        
        # Ìôà ÌôîÎ©¥
        if selected == "Ìôà":
            st.markdown("<h1 class='main-header'>üìà SmartInvestor Pro Dashboard</h1>", unsafe_allow_html=True)
            
            # Ï£ºÏöî ÏßÄÌëú
            col1, col2, col3, col4 = st.columns(4)
            
            # Í∏∞Î≥∏ Ïã¨Î≥º Î¶¨Ïä§Ìä∏
            DEFAULT_SYMBOLS = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'AMZN']
            recommendations = []
            
            with st.spinner("Ï∂îÏ≤ú Ï¢ÖÎ™©ÏùÑ Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§..."):
                for symbol in DEFAULT_SYMBOLS:
                    try:
                        stock = yf.Ticker(symbol)
                        hist = stock.history(period="1mo")
                        if not hist.empty and len(hist) >= 20:
                            hist = calculate_technical_indicators(hist)
                            score, signals = calculate_buy_score(hist)
                            if score >= 3:
                                recommendations.append({
                                    'symbol': symbol,
                                    'score': score,
                                    'price': hist.iloc[-1]['Close'],
                                    'signals': signals
                                })
                    except Exception as e:
                        continue
            
            with col1:
                st.metric("Ï∂îÏ≤ú Ï¢ÖÎ™© Ïàò", len(recommendations), f"Ï¥ù {len(DEFAULT_SYMBOLS)}Í∞ú Î∂ÑÏÑù")
            
            with col2:
                st.metric("Î∂ÑÏÑù Ï¢ÖÎ™© Ïàò", len(DEFAULT_SYMBOLS))
            
            with col3:
                avg_score = np.mean([r['score'] for r in recommendations]) if recommendations else 0
                st.metric("ÌèâÍ∑† Îß§Ïàò Ï†êÏàò", f"{avg_score:.1f}/5.0")
            
            with col4:
                st.metric("ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏", datetime.now().strftime("%H:%M"))
            
            # Ï∂îÏ≤ú Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏
            st.markdown("### üéØ Ïò§ÎäòÏùò Ï∂îÏ≤ú Ï¢ÖÎ™©")
            
            if recommendations:
                for rec in sorted(recommendations, key=lambda x: x['score'], reverse=True):
                    with st.container():
                        col1, col2, col3 = st.columns([2, 1, 3])
                        with col1:
                            st.markdown(f"### {rec['symbol']}")
                            st.caption(f"ÌòÑÏû¨Í∞Ä: ${rec['price']:.2f}")
                        with col2:
                            st.metric("Îß§Ïàò Ï†êÏàò", f"{rec['score']}/5")
                        with col3:
                            st.info(f"Ïã†Ìò∏: {', '.join(rec['signals'])}")
            else:
                st.info("ÌòÑÏû¨ Ï∂îÏ≤ú Ï°∞Í±¥ÏùÑ ÎßåÏ°±ÌïòÎäî Ï¢ÖÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§.")
            
            # ÏãúÏû• ÌûàÌä∏Îßµ
            st.markdown("### üó∫Ô∏è ÏãúÏû• ÌûàÌä∏Îßµ")
            st.components.v1.iframe("https://finviz.com/map.ashx", height=600)
        
        # Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù
        elif selected == "Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù":
            st.markdown("<h1 class='main-header'>üîç Ïã§ÏãúÍ∞Ñ Ï¢ÖÎ™© Î∂ÑÏÑù</h1>", unsafe_allow_html=True)
            
            col1, col2 = st.columns([3, 1])
            
            with col1:
                symbol = st.text_input("Ï¢ÖÎ™© Ïã¨Î≥º ÏûÖÎ†• (Ïòà: AAPL, MSFT, TSLA)", "AAPL").upper().strip()
            
            with col2:
                period = st.selectbox("Í∏∞Í∞Ñ", ["1mo", "3mo", "6mo", "1y", "2y"])
            
            if st.button("Î∂ÑÏÑù ÏãúÏûë", use_container_width=True, type="primary"):
                if not symbol:
                    st.error("Ï¢ÖÎ™© Ïã¨Î≥ºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
                else:
                    with st.spinner(f"{symbol} Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§..."):
                        try:
                            # Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
                            stock = yf.Ticker(symbol)
                            hist = stock.history(period=period)
                            
                            # Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
                            if hist.empty or len(hist) < 20:
                                st.error(f"'{symbol}'Ïóê ÎåÄÌïú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.")
                                st.info("ÌåÅ: ÎØ∏Íµ≠ Ï£ºÏãù Ïã¨Î≥ºÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî (Ïòà: AAPL, MSFT, GOOGL)")
                            else:
                                # Í∏∞Ïà†Ï†Å ÏßÄÌëú Í≥ÑÏÇ∞
                                hist = calculate_technical_indicators(hist)
                                
                                # ÌÉ≠ ÏÉùÏÑ±
                                tab1, tab2, tab3 = st.tabs(["üìä Ï∞®Ìä∏", "üìà Í∏∞Ïà†Ï†Å ÏßÄÌëú", "üìÑ Î¶¨Ìè¨Ìä∏"])
                                
                                with tab1:
                                    # Ï∞®Ìä∏ ÌëúÏãú
                                    fig = go.Figure()
                                    
                                    # Ï∫îÎì§Ïä§Ìã± Ï∞®Ìä∏
                                    fig.add_trace(go.Candlestick(
                                        x=hist.index,
                                        open=hist['Open'],
                                        high=hist['High'],
                                        low=hist['Low'],
                                        close=hist['Close'],
                                        name='Price'
                                    ))
                                    
                                    # Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú
                                    fig.add_trace(go.Scatter(
                                        x=hist.index,
                                        y=hist['BB_upper'],
                                        name='BB Upper',
                                        line=dict(color='rgba(250, 128, 114, 0.5)')
                                    ))
                                    
                                    fig.add_trace(go.Scatter(
                                        x=hist.index,
                                        y=hist['BB_lower'],
                                        name='BB Lower',
                                        line=dict(color='rgba(250, 128, 114, 0.5)'),
                                        fill='tonexty'
                                    ))
                                    
                                    fig.update_layout(
                                        title=f"{symbol} Ï£ºÍ∞Ä Ï∞®Ìä∏",
                                        xaxis_title="ÎÇ†Ïßú",
                                        yaxis_title="Í∞ÄÍ≤© ($)",
                                        height=500,
                                        template="plotly_white"
                                    )
                                    
                                    st.plotly_chart(fig, use_container_width=True)
                                
                                with tab2:
                                    # ÏßÄÌëú Ï∞®Ìä∏
                                    col1, col2 = st.columns(2)
                                    
                                    with col1:
                                        # RSI Ï∞®Ìä∏
                                        fig_rsi = go.Figure()
                                        fig_rsi.add_trace(go.Scatter(
                                            x=hist.index,
                                            y=hist['RSI'],
                                            name='RSI',
                                            line=dict(color='blue')
                                        ))
                                        fig_rsi.add_hline(y=70, line_dash="dash", line_color="red", annotation_text="Í≥ºÎß§Ïàò")
                                        fig_rsi.add_hline(y=30, line_dash="dash", line_color="green", annotation_text="Í≥ºÎß§ÎèÑ")
                                        fig_rsi.update_layout(title="RSI", height=300)
                                        st.plotly_chart(fig_rsi, use_container_width=True)
                                    
                                    with col2:
                                        # MACD Ï∞®Ìä∏
                                        fig_macd = go.Figure()
                                        fig_macd.add_trace(go.Scatter(
                                            x=hist.index,
                                            y=hist['MACD'],
                                            name='MACD',
                                            line=dict(color='blue')
                                        ))
                                        fig_macd.add_trace(go.Scatter(
                                            x=hist.index,
                                            y=hist['MACD_signal'],
                                            name='Signal',
                                            line=dict(color='red')
                                        ))
                                        fig_macd.update_layout(title="MACD", height=300)
                                        st.plotly_chart(fig_macd, use_container_width=True)
                                    
                                    # ÌòÑÏû¨ ÏßÄÌëú Í∞í
                                    st.markdown("### ÌòÑÏû¨ Í∏∞Ïà†Ï†Å ÏßÄÌëú")
                                    latest = hist.iloc[-1]
                                    
                                    col1, col2, col3, col4 = st.columns(4)
                                    with col1:
                                        st.metric("RSI", f"{latest['RSI']:.2f}")
                                    with col2:
                                        st.metric("CCI", f"{latest['CCI']:.2f}")
                                    with col3:
                                        st.metric("MFI", f"{latest['MFI']:.2f}")
                                    with col4:
                                        st.metric("StochRSI", f"{latest['StochRSI']:.2f}")
                                
                                with tab3:
                                    # Îß§Ïàò Ïã†Ìò∏ Î∂ÑÏÑù
                                    score, signals = calculate_buy_score(hist)
                                    
                                    st.markdown("### üìä Î∂ÑÏÑù Í≤∞Í≥º")
                                    
                                    col1, col2, col3 = st.columns(3)
                                    
                                    with col1:
                                        st.metric("Îß§Ïàò Ï†êÏàò", f"{score}/5")
                                    
                                    with col2:
                                        latest_price = hist.iloc[-1]['Close']
                                        st.metric("ÌòÑÏû¨Í∞Ä", f"${latest_price:.2f}")
                                    
                                    with col3:
                                        recommendation = "Îß§Ïàò" if score >= 3 else "Í¥ÄÎßù"
                                        st.metric("Ìà¨Ïûê Ï∂îÏ≤ú", recommendation)
                                    
                                    # Ïã†Ìò∏ ÏÉÅÏÑ∏
                                    if signals:
                                        st.markdown("#### üö¶ ÌôúÏÑ±ÌôîÎêú Îß§Ïàò Ïã†Ìò∏")
                                        for signal in signals:
                                            st.success(f"‚úÖ {signal}")
                                    else:
                                        st.info("ÌòÑÏû¨ ÌôúÏÑ±ÌôîÎêú Îß§Ïàò Ïã†Ìò∏Í∞Ä ÏóÜÏäµÎãàÎã§.")
                                    
                                    # PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
                                    if st.button("üìÑ PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"):
                                        pdf_data = generate_pdf_report(
                                            symbol, 
                                            hist, 
                                            score, 
                                            signals, 
                                            st.session_state.user['username']
                                        )
                                        st.download_button(
                                            label="üì• Î¶¨Ìè¨Ìä∏ Îã§Ïö¥Î°úÎìú",
                                            data=pdf_data,
                                            file_name=f"{symbol}_analysis_{datetime.now().strftime('%Y%m%d')}.pdf",
                                            mime="application/pdf"
                                        )
                                    
                                    # AI Î∂ÑÏÑù (ÏÑ†ÌÉùÏ†Å)
                                    if AI_ENABLED:
                                        if st.button("ü§ñ AI Î∂ÑÏÑù Ïã§Ìñâ"):
                                            with st.spinner("AIÍ∞Ä Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§..."):
                                                ai_analysis = get_ai_analysis(symbol, latest)
                                                st.markdown("### ü§ñ AI Î∂ÑÏÑù Í≤∞Í≥º")
                                                st.info(ai_analysis)
                                
                                # Î∂ÑÏÑù Í∏∞Î°ù Ï†ÄÏû•
                                conn = sqlite3.connect('smartinvestor.db')
                                c = conn.cursor()
                                c.execute("""INSERT INTO analysis_history 
                                            (user_id, symbol, score, recommendation) 
                                            VALUES (?, ?, ?, ?)""",
                                         (st.session_state.user['id'], symbol, score, recommendation))
                                conn.commit()
                                conn.close()
                                
                        except Exception as e:
                            st.error(f"Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
                            st.info("Îã§Ïãú ÏãúÎèÑÌïòÍ±∞ÎÇò Îã§Î•∏ Ï¢ÖÎ™©ÏùÑ Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî.")
        
        # AI Î∂ÑÏÑù (ÏÑ†ÌÉùÏ†Å)
        elif selected == "AI Î∂ÑÏÑù" and AI_ENABLED:
            st.markdown("<h1 class='main-header'>ü§ñ AI Í∏∞Î∞ò Ïã¨Ï∏µ Î∂ÑÏÑù</h1>", unsafe_allow_html=True)
            
            symbol = st.text_input("Î∂ÑÏÑùÌï† Ï¢ÖÎ™© Ïã¨Î≥º", "AAPL").upper().strip()
            
            if st.button("AI Î∂ÑÏÑù ÏãúÏûë", use_container_width=True, type="primary"):
                if not symbol:
                    st.error("Ï¢ÖÎ™© Ïã¨Î≥ºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
                else:
                    with st.spinner("AIÍ∞Ä Ï¢ÖÎ™©ÏùÑ Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§..."):
                        try:
                            stock = yf.Ticker(symbol)
                            hist = stock.history(period="3mo")
                            
                            if hist.empty:
                                st.error("Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.")
                            else:
                                hist = calculate_technical_indicators(hist)
                                latest_data = hist.iloc[-1]
                                
                                # AI Î∂ÑÏÑù Ïã§Ìñâ
                                ai_analysis = get_ai_analysis(symbol, latest_data)
                                
                                # Í≤∞Í≥º ÌëúÏãú
                                st.markdown("### üéØ AI Î∂ÑÏÑù Í≤∞Í≥º")
                                st.info(ai_analysis)
                                
                                # Ï£ºÏöî ÏßÄÌëú ÏãúÍ∞ÅÌôî
                                st.markdown("### üìä Ï£ºÏöî Í∏∞Ïà†Ï†Å ÏßÄÌëú")
                                
                                col1, col2, col3, col4 = st.columns(4)
                                
                                with col1:
                                    rsi_color = "üü¢" if latest_data['RSI'] < 30 else "üü°" if latest_data['RSI'] < 70 else "üî¥"
                                    st.metric("RSI", f"{latest_data['RSI']:.2f} {rsi_color}")
                                
                                with col2:
                                    macd_color = "üü¢" if latest_data['MACD'] > latest_data['MACD_signal'] else "üî¥"
                                    st.metric("MACD", f"{latest_data['MACD']:.2f} {macd_color}")
                                
                                with col3:
                                    st.metric("CCI", f"{latest_data['CCI']:.2f}")
                                
                                with col4:
                                    st.metric("MFI", f"{latest_data['MFI']:.2f}")
                                
                        except Exception as e:
                            st.error(f"AI Î∂ÑÏÑù Ï§ë Ïò§Î•ò Î∞úÏÉù: {str(e)}")
        
        # Ìè¨Ìä∏Ìè¥Î¶¨Ïò§
        elif selected == "Ìè¨Ìä∏Ìè¥Î¶¨Ïò§":
            st.markdown("<h1 class='main-header'>üíº ÎÇ¥ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§</h1>", unsafe_allow_html=True)
            
            # Î∂ÑÏÑù Í∏∞Î°ù Ï°∞Ìöå
            conn = sqlite3.connect('smartinvestor.db')
            history_df = pd.read_sql_query("""
                SELECT symbol, analysis_date, score, recommendation 
                FROM analysis_history 
                WHERE user_id = ? 
                ORDER BY analysis_date DESC 
                LIMIT 20
            """, conn, params=(st.session_state.user['id'],))
            conn.close()
            
            if not history_df.empty:
                # Î∂ÑÏÑù ÌÜµÍ≥Ñ
                st.markdown("### üìä Î∂ÑÏÑù ÌÜµÍ≥Ñ")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    total_analyses = len(history_df)
                    st.metric("Ï¥ù Î∂ÑÏÑù ÌöüÏàò", total_analyses)
                
                with col2:
                    avg_score = history_df['score'].mean()
                    st.metric("ÌèâÍ∑† Îß§Ïàò Ï†êÏàò", f"{avg_score:.2f}")
                
                with col3:
                    buy_recommendations = len(history_df[history_df['recommendation'] == 'Îß§Ïàò'])
                    st.metric("Îß§Ïàò Ï∂îÏ≤ú", buy_recommendations)
                
                with col4:
                    hold_recommendations = len(history_df[history_df['recommendation'] == 'Í¥ÄÎßù'])
                    st.metric("Í¥ÄÎßù Ï∂îÏ≤ú", hold_recommendations)
                
                # Î∂ÑÏÑù Í∏∞Î°ù ÌëúÏãú
                st.markdown("### üìà ÏµúÍ∑º Î∂ÑÏÑù Í∏∞Î°ù")
                
                # Îç∞Ïù¥ÌÑ∞ÌîÑÎ†àÏûÑ Ïä§ÌÉÄÏùºÎßÅ
                def style_recommendation(val):
                    color = 'background-color: #e8f5e9' if val == 'Îß§Ïàò' else 'background-color: #fff3e0'
                    return color
                
                styled_df = history_df.style.applymap(style_recommendation, subset=['recommendation'])
                st.dataframe(styled_df, use_container_width=True)
                
                # Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï∞®Ìä∏
                st.markdown("### üìä Î∂ÑÏÑù Ï¢ÖÎ™© Î∂ÑÌè¨")
                
                symbol_counts = history_df['symbol'].value_counts()
                
                fig_pie = go.Figure(data=[go.Pie(
                    labels=symbol_counts.index,
                    values=symbol_counts.values,
                    hole=.3
                )])
                
                fig_pie.update_layout(
                    title="Î∂ÑÏÑù Ï¢ÖÎ™© ÎπÑÏ§ë",
                    height=400
                )
                
                st.plotly_chart(fig_pie, use_container_width=True)
                
            else:
                st.info("ÏïÑÏßÅ Î∂ÑÏÑù Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§. Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑùÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî!")
                if st.button("Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑùÏúºÎ°ú Ïù¥Îèô"):
                    st.session_state.menu_selection = "Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù"
                    st.rerun()
        
        # Îâ¥Ïä§
        elif selected == "Îâ¥Ïä§":
            st.markdown("<h1 class='main-header'>üì∞ Ìà¨Ïûê Îâ¥Ïä§</h1>", unsafe_allow_html=True)
            
            # RSS ÌîºÎìúÏóêÏÑú Îâ¥Ïä§ Í∞ÄÏ†∏Ïò§Í∏∞
            st.markdown("### üì∞ ÏµúÏã† Ìà¨Ïûê Îâ¥Ïä§")
            
            news_source = st.selectbox(
                "Îâ¥Ïä§ ÏÜåÏä§ ÏÑ†ÌÉù",
                ["Investing.com", "Yahoo Finance", "CNBC"]
            )
            
            feed_urls = {
                "Investing.com": "https://www.investing.com/rss/news.rss",
                "Yahoo Finance": "https://finance.yahoo.com/news/rssindex",
                "CNBC": "https://www.cnbc.com/id/100003114/device/rss/rss.html"
            }
            
            try:
                feed = feedparser.parse(feed_urls[news_source])
                
                if feed.entries:
                    for entry in feed.entries[:10]:
                        with st.container():
                            st.markdown(f"### [{entry.title}]({entry.link})")
                            
                            # Î∞úÌñâÏùº ÌëúÏãú
                            if hasattr(entry, 'published'):
                                st.caption(f"üìÖ {entry.published}")
                            
                            # ÏöîÏïΩ ÌëúÏãú
                            if hasattr(entry, 'summary'):
                                st.write(entry.summary[:300] + "...")
                            
                            st.divider()
                else:
                    st.info("Îâ¥Ïä§Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.")
                    
            except Exception as e:
                st.error(f"Îâ¥Ïä§ Î°úÎî© Ï§ë Ïò§Î•ò Î∞úÏÉù: {str(e)}")
                
            # Ï£ºÏãù Í¥ÄÎ†® ÌåÅ
            st.markdown("### üí° Ìà¨Ïûê ÌåÅ")
            tips = [
                "Î∂ÑÏÇ∞ Ìà¨ÏûêÎ•º ÌÜµÌï¥ Î¶¨Ïä§ÌÅ¨Î•º Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî.",
                "Ïû•Í∏∞ Ìà¨Ïûê Í¥ÄÏ†êÏóêÏÑú Ï†ëÍ∑ºÌïòÏÑ∏Ïöî.",
                "Í∞êÏ†ïÏ†ÅÏù∏ Ìà¨Ïûê Í≤∞Ï†ïÏùÑ ÌîºÌïòÏÑ∏Ïöî.",
                "Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Ìè¨Ìä∏Ìè¥Î¶¨Ïò§Î•º Ïû¨Ï°∞Ï†ïÌïòÏÑ∏Ïöî.",
                "Ìà¨Ïûê Ï†Ñ Ï∂©Î∂ÑÌïú Ï°∞ÏÇ¨ÏôÄ Î∂ÑÏÑùÏùÑ ÌïòÏÑ∏Ïöî."
            ]
            
            for tip in tips:
                st.info(f"üí° {tip}")
        
        # ÏÑ§Ï†ï
        elif selected == "ÏÑ§Ï†ï":
            st.markdown("<h1 class='main-header'>‚öôÔ∏è ÏÑ§Ï†ï</h1>", unsafe_allow_html=True)
            
            # ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
            st.markdown("### üë§ ÎÇ¥ Ï†ïÎ≥¥")
            col1, col2 = st.columns(2)
            
            with col1:
                st.info(f"**ÏÇ¨Ïö©ÏûêÎ™Ö**: {st.session_state.user['username']}")
                st.info(f"**ÏÇ¨Ïö©Ïûê ID**: {st.session_state.user['id']}")
            
            with col2:
                if st.session_state.user.get('is_admin'):
                    st.success("‚úÖ Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôúÏÑ±Ìôî")
                else:
                    st.info("ÏùºÎ∞ò ÏÇ¨Ïö©Ïûê")
            
            # API ÏÉÅÌÉú
            st.markdown("### üîå ÏãúÏä§ÌÖú ÏÉÅÌÉú")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                try:
                    test_ticker = yf.Ticker("AAPL")
                    test_data = test_ticker.history(period="1d")
                    if not test_data.empty:
                        st.success("Yahoo Finance ‚úÖ")
                    else:
                        st.warning("Yahoo Finance ‚ö†Ô∏è")
                except:
                    st.error("Yahoo Finance ‚ùå")
            
            with col2:
                if AI_ENABLED:
                    st.success("OpenAI API ‚úÖ")
                else:
                    st.info("OpenAI API üîß")
            
            with col3:
                st.success("Database ‚úÖ")
            
            # ÏÇ¨Ïö© Í∞ÄÏù¥Îìú
            st.markdown("### üìñ ÏÇ¨Ïö© Í∞ÄÏù¥Îìú")
            
            with st.expander("üîç Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù ÏÇ¨Ïö©Î≤ï"):
                st.markdown("""
                1. Ï¢ÖÎ™© Ïã¨Î≥ºÏùÑ ÏûÖÎ†•Ìï©ÎãàÎã§ (Ïòà: AAPL, MSFT)
                2. Î∂ÑÏÑù Í∏∞Í∞ÑÏùÑ ÏÑ†ÌÉùÌï©ÎãàÎã§
                3. 'Î∂ÑÏÑù ÏãúÏûë' Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï©ÎãàÎã§
                4. Ï∞®Ìä∏, Í∏∞Ïà†Ï†Å ÏßÄÌëú, Ìà¨Ïûê Ïã†Ìò∏Î•º ÌôïÏù∏Ìï©ÎãàÎã§
                5. PDF Î¶¨Ìè¨Ìä∏Î•º Îã§Ïö¥Î°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§
                """)
            
            with st.expander("üìä Í∏∞Ïà†Ï†Å ÏßÄÌëú ÏÑ§Î™Ö"):
                st.markdown("""
                - **RSI**: 30 Ïù¥ÌïòÎäî Í≥ºÎß§ÎèÑ, 70 Ïù¥ÏÉÅÏùÄ Í≥ºÎß§Ïàò
                - **MACD**: ÏãúÍ∑∏ÎÑêÏÑ†Í≥ºÏùò ÍµêÏ∞®Î°ú Îß§Îß§ ÏãúÏ†ê ÌåêÎã®
                - **Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú**: Í∞ÄÍ≤©Ïù¥ ÌïòÎã®ÏÑ† ÌÑ∞Ïπò Ïãú Î∞òÎì± Í∞ÄÎä•ÏÑ±
                - **CCI**: -100 Ïù¥ÌïòÎäî Í≥ºÎß§ÎèÑ Ïã†Ìò∏
                - **MFI**: 20 Ïù¥ÌïòÎäî Îß§Ïàò Í≥†Î†§ Íµ¨Í∞Ñ
                """)
            
            with st.expander("üí° Ìà¨Ïûê Ï†êÏàò ÏãúÏä§ÌÖú"):
                st.markdown("""
                - 5Í∞ú ÏßÄÌëú Ï§ë 3Í∞ú Ïù¥ÏÉÅ Ï∂©Ï°± Ïãú 'Îß§Ïàò' Ï∂îÏ≤ú
                - Í∞Å ÏßÄÌëúÎãπ 1Ï†êÏî© Î∂ÄÏó¨
                - Ï†êÏàòÍ∞Ä ÎÜíÏùÑÏàòÎ°ù Îß§Ïàò Ïã†Ìò∏Í∞Ä Í∞ïÌï®
                """)
            
            # Í¥ÄÎ¶¨Ïûê Í∏∞Îä•
            if st.session_state.user.get('is_admin'):
                st.markdown("### üîê Í¥ÄÎ¶¨Ïûê Í∏∞Îä•")
                
                # ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ
                if st.checkbox("ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ Î≥¥Í∏∞"):
                    conn = sqlite3.connect('smartinvestor.db')
                    
                    # Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Ïàò
                    user_count = pd.read_sql_query("SELECT COUNT(*) as count FROM users", conn).iloc[0]['count']
                    st.metric("Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Ïàò", user_count)
                    
                    # ÏÇ¨Ïö©Ïûê Î™©Î°ù
                    users_df = pd.read_sql_query(
                        "SELECT id, username, email, created_at, is_admin FROM users", 
                        conn
                    )
                    st.dataframe(users_df, use_container_width=True)
                    
                    # Î∂ÑÏÑù ÌÜµÍ≥Ñ
                    analysis_stats = pd.read_sql_query("""
                        SELECT 
                            u.username,
                            COUNT(ah.id) as analysis_count,
                            AVG(ah.score) as avg_score
                        FROM users u
                        LEFT JOIN analysis_history ah ON u.id = ah.user_id
                        GROUP BY u.username
                    """, conn)
                    
                    st.markdown("#### ÏÇ¨Ïö©ÏûêÎ≥Ñ Î∂ÑÏÑù ÌÜµÍ≥Ñ")
                    st.dataframe(analysis_stats, use_container_width=True)
                    
                    conn.close()

if __name__ == "__main__":
    main()